# -*- coding: utf-8 -*-
"""naive_bayes_ações.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g5hVKevOjmeOza8W2-ULiToAC7bOeNHE
"""

import pandas as pd
import numpy as np
import pandas_datareader.data as wb

#importando dados

ativo = wb.get_data_yahoo('ITSA4.SA', start=2000)
ganho = 10
perda = ganho/2
ativo['MM10'] = ativo['Close'].rolling(10).mean()
ativo['MM20'] = ativo['Close'].rolling(20).mean()
ativo['MM100'] = ativo['Close'].rolling(100).mean()
ativo['MM200'] = ativo['Close'].rolling(200).mean()
ativo

#ativo['Adj Close'].plot(figsize=(22,8))

resultado = []
for i in range(0, len(ativo)):
#for i in range(0, 100):
  preco = ativo['Close'][i]
  pre_alto = preco*(1+(ganho/100))
  pre_baixo = preco*(1-(perda/100))
  for j in range(i+1, len(ativo)):
  #n = 250
  #for j in range(i+1, n+1):
    if j == len(ativo)-1:
      resultado.append(None)
    elif ativo['Close'][j] >= pre_alto:
      resultado.append(1)
      break
    elif ativo['Close'][j] <= pre_baixo:
      resultado.append(0)
      break
    
print(resultado)
print(len(resultado))
print(f'Gains!: {resultado.count(1)}')
print(f'Loss!: {resultado.count(0)}')
print(f'None: {resultado.count(None)}')

#resultado.pop(0)
resultado.append(None)
ativo['Resultado'] = resultado
ativo = ativo.dropna()

ativo['MM10'] = ativo['Close'] - ativo['MM10']
ativo['MM20'] = ativo['Close'] - ativo['MM20']
ativo['MM100'] = ativo['Close'] - ativo['MM100']
ativo['MM200'] = ativo['Close'] - ativo['MM200']
ativo

previsores = ativo.iloc[:,0:10]
classe = ativo.iloc[:,10]
classe = classe.astype('int')

from sklearn.model_selection import train_test_split
previsores_treinamento, previsores_teste, classe_treinamento, classe_teste = train_test_split(previsores, classe, test_size=0.15, random_state=0)

from sklearn.naive_bayes import GaussianNB
classificador = GaussianNB()
classificador.fit(previsores_treinamento, classe_treinamento)
previsoes = classificador.predict(previsores_teste)

from sklearn.metrics import confusion_matrix, accuracy_score
precisao = accuracy_score(classe_teste, previsoes)
matriz = confusion_matrix(classe_teste, previsoes)

print(precisao)
print(matriz)

# Conclusão: 54,5%
#Péssimo